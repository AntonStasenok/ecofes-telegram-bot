from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.services.database import SessionLocal, Lead, UserQuery
from bot.utils.helpers import is_valid_email
from bot.services.email_sender import send_lead_email
from bot.services.rag_engine import RAGEngine
from bot.services.llm_service import query_openrouter
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-–¥–≤–∏–∂–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
rag_engine = RAGEngine()

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_inline_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="start_lead")],
        [InlineKeyboardButton(text="FAQ", callback_data="show_faq")]
    ])
    return keyboard


def get_faq_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ FAQ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="start_lead")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    return keyboard


# FSM ‚Äî —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
class LeadForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_industry = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
        "–í—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ <b>ECOFES</b> ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ª–∏–¥–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ "
        "–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–º–∞–∑–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–∞—Å–ª–æ –¥–ª—è –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö\n"
        "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî "
        "–∏ –º—ã –ø–æ–º–æ–∂–µ–º –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è "
        "—Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π ECOFES.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ!"
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
    
    # –û—Ç–¥–µ–ª—å–Ω–æ ‚Äî inline-–º–µ–Ω—é
    await message.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞: –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É
@router.callback_query(F.data == "start_lead")
async def start_lead_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=None)
    await state.set_state(LeadForm.waiting_for_name)
    await callback.answer()


# –°–±–æ—Ä –∏–º–µ–Ω–∏
@router.message(LeadForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(LeadForm.waiting_for_email)


# –°–±–æ—Ä email
@router.message(LeadForm.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    if not is_valid_email(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return
    await state.update_data(email=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
    await state.set_state(LeadForm.waiting_for_phone)


# –°–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(LeadForm.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å, —Å–µ–ª—å—Ö–æ–∑):")
    await state.set_state(LeadForm.waiting_for_industry)


# –°–±–æ—Ä —Å—Ñ–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(LeadForm.waiting_for_industry)
async def process_industry(message: Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data["name"]
    email = user_data["email"]
    phone = user_data["phone"]
    industry = message.text

    # –ü–æ–ª—É—á–∞–µ–º Telegram username
    telegram_username = message.from_user.username
    telegram_username = f"@{telegram_username}" if telegram_username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = SessionLocal()
    try:
        lead = Lead(
            name=name,
            email=email,
            phone=phone,
            industry=industry,
            telegram_username=telegram_username
        )
        db.add(lead)
        db.commit()
        db.refresh(lead)

        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        lead_info = {
            "name": name,
            "email": email,
            "phone": phone,
            "industry": industry,
            "telegram_username": telegram_username,
            "created_at": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        }
        await send_lead_email(lead_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ß–µ–º –µ—â—ë –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞: FAQ
@router.callback_query(F.data == "show_faq")
async def show_faq_callback(callback: CallbackQuery):
    faq_text = (
        "üìã <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):</b>\n\n"

        "<b>1. –ö–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–∞—Å–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è?</b>\n"
        "–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–æ–≤–µ–¥—É—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä, "
        "—É—á–∏—Ç—ã–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –∫–ª–∏–º–∞—Ç.\n\n"

        "<b>2. –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏?</b>\n"
        "–í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ ECOFES ‚Äî –º–∞—Å–ª–∞ –¥–ª—è –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤, –∞–≤—Ç–æ–±—É—Å–æ–≤, —Å–µ–ª—å—Ö–æ–∑- –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, "
        "–º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤, –ª–æ–¥–æ–∫, —Å–Ω–µ–≥–æ—Ö–æ–¥–æ–≤ –∏ —Å–∞–¥–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏. –¢–∞–∫–∂–µ –µ—Å—Ç—å –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–µ, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ, "
        "–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω—ã–µ –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–µ –º–∞—Å–ª–∞.\n\n"

        "<b>3. –ì–¥–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–∏–ª–µ—Ä–∞ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è?</b>\n"
        "–û—Ñ–∏—Å: –≥. –ú–æ—Å–∫–≤–∞, –ø—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ, 8–ê, –æ—Ñ–∏—Å 102.\n"
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –≥. –≠–Ω–≥–µ–ª—å—Å, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 12.\n"
        "–£—Ç–æ—á–Ω–∏—Ç—å –¥–∏–ª–µ—Ä–∞ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email.\n\n"

        "<b>4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?</b>\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 700-80-39\n"
        "‚Ä¢ Email: zakaz@ecoschemtech.ru\n"
        "‚Ä¢ –§–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ ‚Äî –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã.\n\n"

        "<b>5. –ö–∞–∫–æ–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –º–∞—Å–µ–ª?</b>\n"
        "–û—Ç 3 –¥–æ 5 –ª–µ—Ç –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–¥–∞–ª–∏ –æ—Ç –≤–ª–∞–≥–∏, —Å–æ–ª–Ω—Ü–∞, –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ).\n\n"

        "<b>6. –ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?</b>\n"
        "–£–∫–∞–∑–∞–Ω–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –∏ –≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é.\n\n"

        "<b>7. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã?</b>\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, email –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç ‚Äî –Ω–∞—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –¥–∞–¥—É—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.\n\n"

        "<b>8. –ö–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –º–∞—Å–ª–æ –æ–ø—Ç–æ–º?</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: —Å–∫–∏–¥–∫–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, "
        "—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤.\n\n"
    )

    await callback.message.edit_text(faq_text, reply_markup=get_faq_keyboard(), parse_mode="HTML")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–Ω–µ FSM)
@router.message(F.text)
async def handle_any_text(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    current_state = await state.get_state()
    if current_state is not None:
        return

    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.strip()
    if text in ["–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]:
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    db = SessionLocal()
    try:
        user_query = UserQuery(
            user_id=message.from_user.id,
            username=message.from_user.username,
            query_text=text
        )
        db.add(user_query)
        db.commit()
        db.refresh(user_query)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
    finally:
        db.close()

    # –û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ RAG + LLM
    await message.answer("üîé –ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

    try:
        contexts = rag_engine.search(text)
        if not contexts:
            answer = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: +7 (800) 700-80-39"
            )
            await message.answer(answer, reply_markup=get_inline_menu())
            return
        await message.answer(
             f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏):\n\n"
             f"{'-'*50}\n"
             f"{contexts[0]}\n"
             f"{'-'*50}"
        )

        context = "\n\n".join(contexts[:2])
        system_prompt = (
            "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–º–∞–∑–æ—á–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º ECOFES. "
            "–û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ ‚Äî —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É—Ç–æ—á–Ω–∏—Ç–µ –∏ —Å–≤—è–∂–µ—Ç–µ—Å—å."
        )
        full_query = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {text}"

        answer = await query_openrouter(system_prompt, full_query)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        db = SessionLocal()
        try:
            user_query.response_text = answer
            db.add(user_query)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        finally:
            db.close()

        await message.answer(answer, reply_markup=get_inline_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: +7 (800) 700-80-39",
            reply_markup=get_inline_menu()
        )
