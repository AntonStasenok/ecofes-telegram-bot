import os
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.services.database import SessionLocal, Lead, UserQuery
from bot.utils.helpers import is_valid_email
from bot.services.email_sender import send_lead_email
from bot.services.rag_engine import RAGEngine
from bot.services.llm_service import query_openrouter
from bot.services.query_classifier import QueryClassifier
from bot.services.chat_responses import ChatResponses
from datetime import datetime
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ–±—ä—è–≤–∏—Ç—å –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞
SUPPORT_CHAT_ID = os.getenv("SUPPORT_CHAT_ID")
if SUPPORT_CHAT_ID:
    try:
        SUPPORT_CHAT_ID = int(SUPPORT_CHAT_ID)
    except ValueError:
        SUPPORT_CHAT_ID = None
else:
    SUPPORT_CHAT_ID = None

print(f"üîß [DEBUG] SUPPORT_CHAT_ID = {SUPPORT_CHAT_ID}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
rag_engine = RAGEngine()
query_classifier = QueryClassifier()
chat_responses = ChatResponses()

# ========================= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========================

def get_inline_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Å–ª–æ", callback_data="start_selection")],
        [InlineKeyboardButton(text="üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_lead")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="show_faq")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="start_support_chat")]
    ])

def get_faq_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ FAQ"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="start_lead")],
        [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Å–ª–æ", callback_data="start_selection")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_support_menu():
    """–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="start_support_chat")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_end_chat_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_support_chat")]
    ])

def get_selection_keyboard():
    """–ú–µ–Ω—é –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="select_car")],
        [InlineKeyboardButton(text="üöõ –ì—Ä—É–∑–æ–≤–∏–∫/–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π", callback_data="select_truck")],
        [InlineKeyboardButton(text="üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª", callback_data="select_moto")],
        [InlineKeyboardButton(text="‚ùÑÔ∏è –°–Ω–µ–≥–æ—Ö–æ–¥", callback_data="select_snow")],
        [InlineKeyboardButton(text="üõ•Ô∏è –í–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="select_water")],
        [InlineKeyboardButton(text="üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", callback_data="select_industrial")],
        [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# ========================= FSM –°–û–°–¢–û–Ø–ù–ò–Ø =========================

class LeadForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞"""
    waiting_for_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_industry = State()

class SelectionForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞"""
    waiting_for_vehicle_info = State()

# ========================= –ö–û–ú–ê–ù–î–´ –ò –ú–ï–ù–Æ =========================

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
        "–í—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ <b>ECOFES</b> ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ª–∏–¥–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ "
        "–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–º–∞–∑–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–∞—Å–ª–æ –¥–ª—è –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö\n"
        "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî "
        "–∏ –º—ã –ø–æ–º–æ–∂–µ–º –æ–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è "
        "—Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π ECOFES.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ!"
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.clear()
    await message.answer(welcome_text, reply_markup=ReplyKeyboardRemove(), parse_mode="HTML")
    
    # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–º–µ–Ω—é
    await message.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())
    await callback.answer()

# ========================= –ü–û–î–ë–û–† –ú–ê–°–õ–ê =========================

@router.callback_query(F.data == "start_selection")
async def start_selection_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞"""
    await state.clear()
    selection_text = (
        "üîç <b>–ü–æ–¥–±–æ—Ä –º–∞—Å–ª–∞ ECOFES</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    )
    await callback.message.edit_text(selection_text, reply_markup=get_selection_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("select_"))
async def vehicle_type_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏"""
    vehicle_types = {
        "select_car": "üöó –ª–µ–≥–∫–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "select_truck": "üöõ –≥—Ä—É–∑–æ–≤–æ–≥–æ/–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
        "select_moto": "üèçÔ∏è –º–æ—Ç–æ—Ü–∏–∫–ª–∞",
        "select_snow": "‚ùÑÔ∏è —Å–Ω–µ–≥–æ—Ö–æ–¥–∞",
        "select_water": "üõ•Ô∏è –≤–æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
        "select_industrial": "üè≠ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"
    }
    
    vehicle_type = vehicle_types.get(callback.data, "—Ç–µ—Ö–Ω–∏–∫–∏")
    
    await state.update_data(vehicle_type=callback.data)
    
    info_text = (
        f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–±–∏—Ä–∞–µ–º –º–∞—Å–ª–æ –¥–ª—è {vehicle_type}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
        "‚Ä¢ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å\n"
        "‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n"
        "‚Ä¢ –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)\n"
        "‚Ä¢ –ü—Ä–æ–±–µ–≥ (–¥–ª—è –∞–≤—Ç–æ)\n"
        "‚Ä¢ –£—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏\n\n"
        "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –ø–æ–¥–±–æ—Ä! üìù"
    )
    
    await callback.message.edit_text(info_text, reply_markup=None)
    await state.set_state(SelectionForm.waiting_for_vehicle_info)
    await callback.answer()

@router.message(SelectionForm.waiting_for_vehicle_info)
async def process_vehicle_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ –∏ –ø–æ–¥–±–æ—Ä –º–∞—Å–ª–∞"""
    user_data = await state.get_data()
    vehicle_info = message.text
    vehicle_type = user_data.get("vehicle_type", "")
    
    await message.answer("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥–±–∏—Ä–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å–ª–æ...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞
    selection_query = f"–ü–æ–¥–±–æ—Ä –º–∞—Å–ª–∞ –¥–ª—è {vehicle_info}"
    
    try:
        # –ò—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        contexts = rag_engine.search(selection_query)
        
        if contexts:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞
            system_prompt = (
                "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –º–æ—Ç–æ—Ä–Ω—ã—Ö –º–∞—Å–µ–ª ECOFES. "
                "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ –∫–ª–∏–µ–Ω—Ç–∞, "
                "–ø–æ–¥–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Å–ª–∞ –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ ECOFES. "
                "–í–ê–ñ–ù–û: —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. "
                "–û–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –º–∞—Å–ª–∞ –ø–æ–¥—Ö–æ–¥—è—Ç. "
                "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–∏ –º–∞—Å–µ–ª, –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ—ë —É –∫–ª–∏–µ–Ω—Ç–∞."
            )
            
            context = "\n\n".join(contexts[:3])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            full_query = (
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø—Ä–æ–¥—É–∫—Ç—ã ECOFES):\n{context}\n\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {vehicle_info}\n"
                f"–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏: {vehicle_type}\n\n"
                f"–ó–∞–¥–∞—á–∞: –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å–ª–æ"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç LLM
            recommendation = await query_openrouter(system_prompt, full_query)
            
            if recommendation:
                await message.answer(
                    f"‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–æ–¥–±–æ—Ä—É –º–∞—Å–ª–∞:</b>\n\n{recommendation}",
                    parse_mode="HTML",
                    reply_markup=get_inline_menu()
                )
            else:
                await message.answer(
                    chat_responses.get_technical_help_response(),
                    reply_markup=get_inline_menu()
                )
        else:
            # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏. "
                "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.",
                reply_markup=get_inline_menu()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –º–∞—Å–ª–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –º–∞—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.",
            reply_markup=get_inline_menu()
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    db = SessionLocal()
    try:
        user_query = UserQuery(
            user_id=message.from_user.id,
            username=message.from_user.username,
            query_text=f"–ü–æ–¥–±–æ—Ä –º–∞—Å–ª–∞: {vehicle_info}",
            response_text=recommendation if 'recommendation' in locals() else "–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞"
        )
        db.add(user_query)
        db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–∞: {e}")
    finally:
        db.close()
    
    await state.clear()

# ========================= –°–ë–û–† –ó–ê–Ø–í–ö–ò (FSM) =========================

@router.callback_query(F.data == "start_lead")
async def start_lead_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏"""
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=None)
    await state.set_state(LeadForm.waiting_for_name)
    await callback.answer()

@router.message(LeadForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–°–±–æ—Ä –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(LeadForm.waiting_for_email)

@router.message(LeadForm.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–°–±–æ—Ä email —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if not is_valid_email(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return
    
    await state.update_data(email=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
    await state.set_state(LeadForm.waiting_for_phone)

@router.message(LeadForm.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–°–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å, —Å–µ–ª—å—Ö–æ–∑):")
    await state.set_state(LeadForm.waiting_for_industry)

@router.message(LeadForm.waiting_for_industry)
async def process_industry(message: Message, state: FSMContext):
    """–°–±–æ—Ä —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–∞"""
    user_data = await state.get_data()
    name = user_data["name"]
    email = user_data["email"]
    phone = user_data["phone"]
    industry = message.text

    # –ü–æ–ª—É—á–∞–µ–º Telegram username
    telegram_username = message.from_user.username
    telegram_username = f"@{telegram_username}" if telegram_username else "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = SessionLocal()
    try:
        lead = Lead(
            name=name,
            email=email,
            phone=phone,
            industry=industry,
            telegram_username=telegram_username
        )
        db.add(lead)
        db.commit()
        db.refresh(lead)

        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        lead_info = {
            "name": name,
            "email": email,
            "phone": phone,
            "industry": industry,
            "telegram_username": telegram_username,
            "created_at": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        }
        await send_lead_email(lead_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer("–ß–µ–º –µ—â—ë –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())

# ========================= FAQ =========================

@router.callback_query(F.data == "show_faq")
async def show_faq_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ FAQ"""
    faq_text = (
        "üìã <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):</b>\n\n"

        "<b>1. –ö–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–∞—Å–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è?</b>\n"
        "–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–æ–≤–µ–¥—É—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä, "
        "—É—á–∏—Ç—ã–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, —É—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –∫–ª–∏–º–∞—Ç.\n\n"

        "<b>2. –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∏?</b>\n"
        "–í –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ ECOFES ‚Äî –º–∞—Å–ª–∞ –¥–ª—è –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤, –∞–≤—Ç–æ–±—É—Å–æ–≤, —Å–µ–ª—å—Ö–æ–∑- –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏, "
        "–º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤, –ª–æ–¥–æ–∫, —Å–Ω–µ–≥–æ—Ö–æ–¥–æ–≤ –∏ —Å–∞–¥–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏. –¢–∞–∫–∂–µ –µ—Å—Ç—å –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–µ, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ, "
        "–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω—ã–µ –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–µ –º–∞—Å–ª–∞.\n\n"

        "<b>3. –ì–¥–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–∏–ª–µ—Ä–∞ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è?</b>\n"
        "–û—Ñ–∏—Å: –≥. –ú–æ—Å–∫–≤–∞, –ø—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ä–Ω–∞–¥—Å–∫–æ–≥–æ, 8–ê, –æ—Ñ–∏—Å 102.\n"
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –≥. –≠–Ω–≥–µ–ª—å—Å, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 12.\n"
        "–£—Ç–æ—á–Ω–∏—Ç—å –¥–∏–ª–µ—Ä–∞ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email.\n\n"

        "<b>4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?</b>\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 700-80-39\n"
        "‚Ä¢ Email: zakaz@ecoschemtech.ru\n"
        "‚Ä¢ –§–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç–µ ‚Äî –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã.\n\n"

        "<b>5. –ö–∞–∫–æ–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –º–∞—Å–µ–ª?</b>\n"
        "–û—Ç 3 –¥–æ 5 –ª–µ—Ç –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤–¥–∞–ª–∏ –æ—Ç –≤–ª–∞–≥–∏, —Å–æ–ª–Ω—Ü–∞, –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ).\n\n"

        "<b>6. –ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?</b>\n"
        "–£–∫–∞–∑–∞–Ω–∞ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –∏ –≤ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é.\n\n"

        "<b>7. –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã?</b>\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, email –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç ‚Äî –Ω–∞—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –¥–∞–¥—É—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.\n\n"

        "<b>8. –ö–∞–∫ —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –º–∞—Å–ª–æ –æ–ø—Ç–æ–º?</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: —Å–∫–∏–¥–∫–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, "
        "—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤.\n\n"
    )

    await callback.message.edit_text(faq_text, reply_markup=get_faq_keyboard(), parse_mode="HTML")
    await callback.answer()

# ========================= –ß–ê–¢ –° –ü–û–î–î–ï–†–ñ–ö–û–ô =========================

@router.callback_query(F.data == "start_support_chat")
async def start_support_chat(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    if not SUPPORT_CHAT_ID:
        await callback.message.edit_text(
            "‚ùå –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_inline_menu()
        )
        await callback.answer()
        return

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    await state.clear()
    await state.update_data(in_support_chat=True)
    
    await callback.message.edit_text(
        "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í—Å—ë, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /end.",
        reply_markup=get_end_chat_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "end_support_chat")
async def end_support_chat_callback(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    user_data = await state.get_data()
    if not user_data.get("in_support_chat"):
        await callback.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        return
    
    await state.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(
        "‚úÖ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
        "–ß–µ–º –µ—â—ë –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
        reply_markup=get_inline_menu()
    )
    await callback.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")

@router.message(F.text == "/end")
async def end_support_chat(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    user_data = await state.get_data()
    if not user_data.get("in_support_chat"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
    
    await state.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("‚úÖ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    await message.answer("–ß–µ–º –µ—â—ë –º–æ–∂–µ–º –ø–æ–º–æ—á—å?", reply_markup=get_inline_menu())

@router.message(F.reply_to_message)
async def handle_manager_reply(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if SUPPORT_CHAT_ID is None or message.chat.id != SUPPORT_CHAT_ID:
        return

    replied = message.reply_to_message
    if not replied or not replied.text:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id_match = re.search(r"ID: (\d+)", replied.text)
    if not user_id_match:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    user_id = int(user_id_match.group(1))
    bot = message.bot

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        await bot.send_message(
            chat_id=user_id,
            text=f"üìé –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n<i>{message.text}</i>",
            parse_mode="HTML",
            reply_markup=get_end_chat_keyboard()
        )
        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É {user_id}: {e}")

# ========================= –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê =========================

@router.message(F.text)
async def handle_all_text_messages(message: Message, state: FSMContext):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    current_state = await state.get_state()
    if current_state is not None:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    text = message.text.strip()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    if text in ["/start", "/end", "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]:
        return
    
    print(f"üîß [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id}: '{text}'")
    print(f"üîß [DEBUG] –†–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {user_data.get('in_support_chat', False)}")
    
    # –†–ï–ñ–ò–ú –ü–û–î–î–ï–†–ñ–ö–ò - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–ï–†–í–´–ú
    if user_data.get("in_support_chat"):
        if not SUPPORT_CHAT_ID:
            await message.answer("‚ùå –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        bot: Bot = message.bot
        user = message.from_user

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_text = (
            f"üó£Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
            f"Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"ID: {user.id}\n"
            f"---\n"
            f"{text}"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await bot.send_message(
                chat_id=SUPPORT_CHAT_ID,
                text=manager_text
            )
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await message.answer(
                "üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=get_end_chat_keyboard()
            )
            print(f"‚úÖ [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
        
        return  # –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    print(f"üîß [DEBUG] –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{text}'")
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    query_type, confidence = query_classifier.classify_query(text)
    print(f"üîß [DEBUG] –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {query_type}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")

    # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    db = SessionLocal()
    user_query = None
    try:
        user_query = UserQuery(
            user_id=message.from_user.id,
            username=message.from_user.username,
            query_text=text
        )
        db.add(user_query)
        db.commit()
        db.refresh(user_query)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    answer = None
    
    if query_type == "greeting":
        answer = chat_responses.get_greeting_response()
        
    elif query_type == "about":
        answer = chat_responses.get_about_response(text)
        
    elif query_type == "simple":
        if any(word in text.lower() for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä"]):
            answer = chat_responses.get_simple_response()
        elif any(word in text.lower() for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]):
            answer = chat_responses.get_goodbye_response()
        else:
            answer = chat_responses.get_simple_response()
    
    elif query_type == "commercial":
        answer = chat_responses.get_commercial_response()
        
    elif query_type == "selection":
        answer = chat_responses.get_selection_response()
    
    elif query_type == "catalog":
        answer = chat_responses.get_catalog_response()
    
    elif query_type in ["technical", "general"] and confidence >= query_classifier.get_confidence_threshold(query_type):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG + LLM –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        await message.answer("üîé –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
        
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            keywords = query_classifier.get_query_keywords(text)
            search_query = f"{text} {' '.join(keywords)}" if keywords else text
            
            contexts = rag_engine.search(search_query)
            if not contexts:
                answer = chat_responses.get_technical_help_response()
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–æ—Å –∫ LLM
                context = "\n\n".join(contexts[:3])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                system_prompt = (
                    "–í—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ ECOFES ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è "
                    "–≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–º–∞–∑–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–≥–æ—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ "
                    "–º–æ—Ç–æ—Ä–Ω—ã—Ö –º–∞—Å–µ–ª, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω—ã—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π, –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏—Ö –º–∞—Å–µ–ª –∏ –¥—Ä—É–≥–∏—Ö —Å–º–∞–∑–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ "
                    "–¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.\n\n"
                    "–í–ê–ñ–ù–û: –æ—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
                    "–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏—Ç–µ: "
                    "'–í –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. "
                    "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.'\n\n"
                    "–ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô–¢–ï –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                    "–ï—Å–ª–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äî –¥–∞–≤–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π —Å–æ–≤–µ—Ç. "
                    "–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ECOFES, –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
                )
                
                full_query = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ECOFES):\n{context}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {text}"

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
                answer = await query_openrouter(system_prompt, full_query)
                
                if not answer or "–Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞" in answer.lower():
                    answer = chat_responses.get_technical_help_response()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å RAG/LLM: {e}")
            answer = (
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
            )
    
    else:
        # –î–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        answer = chat_responses.get_unknown_response()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
    if user_query and answer:
        try:
            user_query.response_text = answer
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if answer:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if query_type in ["greeting", "about"]:
            keyboard = get_inline_menu()
        elif query_type in ["commercial", "selection", "catalog"]:
            keyboard = get_inline_menu()  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤
        elif query_type == "simple":
            keyboard = None  # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω—É–∂–Ω–∞
        else:
            keyboard = get_inline_menu()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            
        parse_mode = "HTML" if "<b>" in answer or "<i>" in answer else None
        await message.answer(answer, reply_markup=keyboard, parse_mode=parse_mode)
    else:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=get_inline_menu()
        )

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    db.close()


# ========================= –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –¢–ò–ü–û–í –°–û–û–ë–©–ï–ù–ò–ô =========================

@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)"""
    await message.answer(
        "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
        reply_markup=get_inline_menu()
    )
