# bot/services/llm_service.py
import httpx
import os
from dotenv import load_dotenv
import logging

load_dotenv()
logger = logging.getLogger(__name__)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "deepseek/deepseek-chat-v3-0324:free")

async def query_openrouter(system_prompt: str, user_query: str) -> str:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenRouter —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤
    """
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: API –∫–ª—é—á OpenRouter –Ω–µ –∑–∞–¥–∞–Ω."

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                url="https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "HTTP-Referer": "https://xn--j1aijl6bd.xn--p1ai/",
                    "X-Title": "ECOFES Bot"
                },
                json={
                    "model": OPENROUTER_MODEL,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_query}
                    ],
                    "temperature": 0.3,  # –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                    "max_tokens": 400,   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                    "top_p": 0.9        # –î–æ–±–∞–≤–ª—è–µ–º top_p –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                },
                timeout=30.0
            )

            if response.status_code == 200:
                data = response.json()
                raw_answer = data["choices"][0]["message"]["content"].strip()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —É–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç
                filtered_answer = filter_and_improve_answer(raw_answer)
                return filtered_answer
                
            else:
                logger.error(f"OpenRouter API error {response.status_code}: {response.text}")
                return (
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI-—Å–∏—Å—Ç–µ–º–æ–π. "
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: +7 (800) 700-80-39"
                )

        except httpx.TimeoutException:
            logger.error("OpenRouter API timeout")
            return (
                "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
            )
        except Exception as e:
            logger.error(f"OpenRouter API exception: {str(e)}")
            return (
                "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            )

def filter_and_improve_answer(answer: str) -> str:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç LLM
    """
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    answer = answer.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —è–≤–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    problematic_phrases = [
        "—è –Ω–µ –∑–Ω–∞—é",
        "–Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å",
        "–Ω–µ –∏–º–µ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "—É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ",
        "–∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ"
    ]
    
    answer_lower = answer.lower()
    
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
    for phrase in problematic_phrases:
        if phrase in answer_lower:
            return (
                "–í –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: "
                "+7 (800) 700-80-39"
            )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    if len(answer) > 800:
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        sentences = answer.split('.')
        truncated = ""
        for sentence in sentences:
            if len(truncated + sentence + ".") <= 700:
                truncated += sentence + "."
            else:
                break
        
        if truncated:
            answer = truncated + "\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        else:
            answer = answer[:700] + "...\n\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–≤–æ–Ω–∏—Ç–µ: +7 (800) 700-80-39"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if any(word in answer_lower for word in ["–º–∞—Å–ª–æ", "–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–≤—è–∑–∫–æ—Å—Ç—å", "–∑–∞–º–µ–Ω–∞"]):
        if "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü" not in answer_lower and "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" not in answer_lower:
            answer += "\n\nüí° –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –º–∞—Å–ª–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É!"
    
    return answer
